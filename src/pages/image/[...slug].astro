---
import { render } from "astro:content"
import { experimental_AstroContainer } from "astro/container"
import { format } from "date-fns"
import { convert as htmlToText } from "html-to-text"

import Layout from "../../layouts/Layout.astro"
import { getImages } from "../../utils/getImages"
import { HDRToggle, Pagination, Picture } from "../../components"

export async function getStaticPaths() {
  return (await getImages()).map((entry, index) => ({
    params: { slug: entry.id },
    props: { entry, index },
  }))
}

const images = await getImages()

const { entry, index } = Astro.props as Awaited<
  ReturnType<typeof getStaticPaths>
>[0]["props"]
const { Content } = await render(entry)

const container = await experimental_AstroContainer.create()
const htmlDescription = await container.renderToString(Content)
const textDescription = htmlToText(htmlDescription, { wordwrap: false })

const previousPath = index > 0 ? `/image/${images[index - 1].id}/` : undefined
const nextPath =
  index + 1 < images.length ? `/image/${images[index + 1].id}/` : undefined
const returnPath = `/#${entry.id}`

const hdrSrc = entry.data.hdrSrc
const largeImageWidth = "calc(100vw - 2 * 0.75rem)"
const imgSizes = `(height < 550px) calc(0.45 * (100vw - 1.5rem) - 1rem),
${largeImageWidth}`
---

<style
  define:vars={{
    /* eslint-disable astro/no-unused-define-vars-in-style */
    "large-img-display-width": largeImageWidth,
    "img-height": entry.data.src.height,
    "img-width": entry.data.src.width,
    /* eslint-enable astro/no-unused-define-vars-in-style */
  }}
>
  @import "./_[...slug].pcss";
</style>

<Layout
  description={textDescription}
  title={entry.data.title}
  nextUrl={nextPath}
  photo={entry}
  previousUrl={previousPath}
  returnUrl={returnPath}
  fullWidth
  showTitle
  data-return-path={returnPath}
  data-previous-path={previousPath}
  data-next-path={nextPath}
>
  <div class="container-wide short-grid content">
    <div class="wrapper">
      <Picture
        id="fullscreen-sdr-picture"
        class:list={[hdrSrc && "sdr", "standalone-fullscreen-picture"]}
        src={entry.data.src}
        alt={entry.data.title}
        title="Exit fullscreen mode"
        lazy
      />
      <Picture
        id="standalone-sdr-picture"
        class:list={[hdrSrc && "sdr", "standalone-picture"]}
        src={entry.data.src}
        alt={entry.data.title}
        lazy={Boolean(hdrSrc)}
        sizes={imgSizes}
      />
      {
        hdrSrc && (
          <>
            <Picture
              id="fullscreen-hdr-picture"
              class="standalone-fullscreen-picture hdr"
              src={hdrSrc}
              alt={entry.data.title}
              title="Exit fullscreen mode"
              hdr
              lazy
            />
            <Picture
              id="standalone-hdr-picture"
              class="standalone-picture hdr"
              src={hdrSrc}
              alt={entry.data.title}
              sizes={imgSizes}
              hdr
              lazy
            />
          </>
        )
      }
    </div>
    <div class="details">
      <div class="details-top-row">
        <div class="title">
          <h1 class="title-name">{entry.data.title}</h1>
          {
            hdrSrc && (
              <HDRToggle
                class="hdr-toggle mobile-hdr-toggle"
                idSuffix="mobile-toggle"
              />
            )
          }
        </div>
        <div class="details-nav">
          <Pagination
            class="pagination-image-page"
            entryName="image"
            previousHref={previousPath}
            nextHref={nextPath}
          />
        </div>
      </div>
      <div class="properties-wrapper">
        <dl class="properties">
          <dt class="visually-hidden">Date taken</dt>
          <dd title="Date taken" class="mobile-margin-bottom">
            <time datetime={entry.data.exif.date.toISOString()}>
              {format(entry.data.exif.date, "d MMMM yyyy")}
            </time>
          </dd>
          <div class="mobile-full-break"></div>
          <dt class="visually-hidden">Camera</dt>
          <dd title="Camera">
            {entry.data.exif.cameraModel}
          </dd>
          <dt class="visually-hidden">Lens</dt>
          <dd title="Lens">
            {entry.data.exif.lensModel}
          </dd>
          <div class="mobile-full-break"></div>
          <dt class="visually-hidden">Focal length</dt>
          <dd title="Focal length">
            {entry.data.exif.focalLength?.replace(" ", "")}
          </dd>
          <dt class="visually-hidden">f-number</dt>
          <dd title="f-number" class="f-number">Æ’/{entry.data.exif.fNumber}</dd>
          <dt class="visually-hidden">Exposure time</dt>
          <dd title="Exposure time">{entry.data.exif.exposureTime}s</dd>
          <dt class="visually-hidden">ISO</dt>
          <dd>
            <span aria-hidden="true">ISO</span>{" "}{entry.data.exif.iso}
          </dd>
        </dl>
        {
          hdrSrc && (
            <HDRToggle
              class="hdr-toggle desktop-hdr-toggle"
              idSuffix="desktop-toggle"
            />
          )
        }
      </div>
      <Content />
    </div>
  </div>
</Layout>

<script>
  import "./_[...slug]"
</script>
