---
import type { ImageMetadata } from "astro"
import { getImage } from "astro:assets"
export interface Props {
  alt: string
  class: string
  id?: string
  lazy?: boolean
  sizes?: string
  src: ImageMetadata
  title?: string
}

const { alt, class: class_, id, lazy, src, sizes, title } = Astro.props

const widths = [
  src.width,
  ...[1920, 960, 640, 320].filter((width) => width < src.width),
]

async function generateImages(
  format: Parameters<typeof getImage>[0]["format"],
  quality: number,
) {
  return Promise.all(
    widths.map((width) => getImage({ src, width, format, quality })),
  )
}

function makeSrcset(images: Awaited<ReturnType<typeof getImage>>[]) {
  return images.map((image) => `${image.src} ${image.options.width}w`).join(",")
}

const avifImages = await generateImages("avif", 80)
const webpImages = await generateImages("webp", 87.5)
const fallbackImage = webpImages[0]
---

<style>
  .picture img {
    height: auto;
    width: 100%;
  }
</style>

<picture class:list={["picture", class_]} id={id} title={title}>
  <source
    srcset={makeSrcset(avifImages)}
    type="image/avif"
    width={src.width}
    height={src.height}
    sizes={sizes}
  />
  <source
    srcset={makeSrcset(webpImages)}
    type="image/webp"
    width={src.width}
    height={src.height}
    sizes={sizes}
  />
  <img
    src={fallbackImage.src}
    width={src.width}
    height={src.height}
    alt={alt}
    loading={lazy ? "lazy" : undefined}
  />
</picture>
