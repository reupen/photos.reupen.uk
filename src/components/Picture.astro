---
import { ImageMetadata } from "astro"
import { getImage, LocalImageProps, Image } from "astro:assets"
export interface Props {
  class: string
  src: ImageMetadata
}

const { class: class_, src } = Astro.props

const widths = [
  src.width,
  ...[960 * 2, 960, 600, 300].filter((width) => width < src.width),
]

async function generateImages(format: Parameters<getImage>[0]["format"]) {
  return Promise.all(
    widths.map((width) => getImage({ src, width, format, quality: 95 })),
  )
}

function makeSrcset(images: Awaited<ReturnValue<getImage>>[]) {
  return images.map((image) => `${image.src} ${image.options.width}w`).join(",")
}

const avifImages = await generateImages("avif")
const webpImages = await generateImages("webp")
---

<style>
  .picture img {
    width: 100%;
  }
</style>

<picture class:list={["picture", class_]}>
  <source srcset={makeSrcset(avifImages)} type="image/avif" />
  <source srcset={makeSrcset(webpImages)} type="image/webp" />
  <img src={webpImages[0].src} alt="TODO" />
</picture>
