---
import { GetImageResult, ImageMetadata, ImageTransform } from "astro"
import { getImage, LocalImageProps, Image } from "astro:assets"
export interface Props {
  id?: string
  class: string
  alt: string
  src: ImageMetadata
}

const { class: class_, id, src, alt } = Astro.props

const widths = [
  src.width,
  ...[960 * 2, 960, 600, 300].filter((width) => width < src.width),
]

async function safeGetImage(
  options: ImageTransform & { src: ImageMetadata },
): Promise<GetImageResult> {
  const { src, width, format } = options

  if (src.format === format && src.width === width) {
    return {
      options: {
        format: src.format,
        width: src.width,
        height: src.height,
      },
      src: src.src,
    }
  }

  return getImage(options)
}

async function generateImages(
  format: Parameters<getImage>[0]["format"],
  quality: number,
) {
  return Promise.all(
    widths.map((width) => safeGetImage({ src, width, format, quality })),
  )
}

function makeSrcset(images: Awaited<ReturnValue<getImage>>[]) {
  return images.map((image) => `${image.src} ${image.options.width}w`).join(",")
}

const avifImages = await generateImages("avif", 95)
const webpImages = await generateImages("webp", 90)
const fallbackImage = webpImages[0]
---

<style>
  .picture,
  .picture img {
    height: auto;
    width: 100%;
  }
</style>

<picture class:list={["picture", class_]} id={id}>
  <source
    srcset={makeSrcset(avifImages)}
    type="image/avif"
    width={src.width}
    height={src.height}
  />
  <source
    srcset={makeSrcset(webpImages)}
    type="image/webp"
    width={src.width}
    height={src.height}
  />
  <img
    src={fallbackImage.src}
    width={src.width}
    height={src.height}
    alt={alt}
  />
</picture>
