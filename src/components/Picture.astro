---
import type { AstroBuiltinAttributes, ImageMetadata } from "astro"
import type { HTMLAttributes } from "astro/types"
import { getImage } from "astro:assets"

export interface Props extends Pick<AstroBuiltinAttributes, "class:list"> {
  alt: string
  class?: string
  hdr?: boolean
  id?: string
  lazy?: boolean
  sizes?: string
  style?: HTMLAttributes<"img">["style"]
  src: ImageMetadata
  title?: string
}

const {
  alt,
  class: class_,
  "class:list": classList,
  hdr: isHDR,
  id,
  lazy,
  src,
  sizes,
  style,
  title,
} = Astro.props

const widths = [
  src.width,
  ...[1920, 960, 640, 320].filter((width) => width < src.width),
]

async function generateImages(
  format: Parameters<typeof getImage>[0]["format"],
  quality: number,
) {
  return Promise.all(
    widths.map((width) => getImage({ isHDR, src, width, format, quality })),
  )
}

function makeSrcset(images: Awaited<ReturnType<typeof getImage>>[]) {
  return images
    .map((image) => `${image.src} ${image.attributes.width}w`)
    .join(",")
}

const avifImages = await generateImages("avif", 80)
const webpImages = isHDR ? null : await generateImages("webp", 87.5)
const fallbackImage = (webpImages ?? avifImages)[0]
---

<style>
  .picture :global(img) {
    height: auto;
    width: 100%;
  }
</style>

<picture class:list={["picture", classList, class_]} id={id} title={title}>
  <source
    srcset={makeSrcset(avifImages)}
    type="image/avif"
    width={src.width}
    height={src.height}
    sizes={sizes}
  />
  {
    webpImages && (
      <source
        srcset={makeSrcset(webpImages)}
        type="image/webp"
        width={src.width}
        height={src.height}
        sizes={sizes}
      />
    )
  }
  <img
    src={fallbackImage.src}
    width={src.width}
    height={src.height}
    alt={alt}
    loading={lazy ? "lazy" : undefined}
    style={style}
  />
</picture>
