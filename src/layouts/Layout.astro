---
import "@fontsource-variable/noto-sans/wght.css"
import "@fontsource-variable/noto-sans/wght-italic.css"

import type { Photo } from "../utils/getImages"
import "./font-awesome.scss"
import "./Layout.pcss"
import { getImage } from "astro:assets"

export interface Props {
  title?: string
  description?: string
  fullWidth?: boolean
  nextUrl?: string
  photo?: Photo
  previousUrl?: string
  returnUrl?: string
  showTitle?: boolean
}

const siteTitle = "Reupen’s photos"
const siteDescription = "Photos I’ve taken"
const twitterCreator = "@reupen"
const {
  title,
  description,
  fullWidth,
  nextUrl,
  photo,
  previousUrl,
  returnUrl,
  showTitle,
  ...rest
} = Astro.props

const computedDescription = description || siteDescription
const computedTitle =
  title && title !== siteTitle ? `${title} – ${siteTitle}` : siteTitle

const resizedImage = photo
  ? await getImage({
      src: photo.data.src,
      width: 1920,
      format: "jpg",
      quality: 95,
    })
  : null

const resizedWidth = resizedImage?.attributes.width
const resizedHeight = resizedImage?.attributes.height
---

<html lang="en" {...rest}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <title>{computedTitle}</title>
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={computedDescription} />
    <meta name="robots" content="max-image-preview:large" />
    <meta property="og:title" content={title || siteTitle} />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:description" content={computedDescription} />
    <meta property="og:type" content="website" />
    {
      photo && resizedImage && (
        <>
          <meta
            property="og:image"
            content={new URL(resizedImage.src, Astro.site)}
          />
          <meta property="og:image:type" content="image/jpeg" />
          {resizedWidth && (
            <meta property="og:image:width" content={resizedWidth} />
          )}
          {resizedHeight && (
            <meta property="og:image:height" content={resizedHeight} />
          )}
          <meta property="og:image:alt" content={photo.data.title} />
        </>
      )
    }

    <meta
      name="twitter:card"
      content={resizedImage ? "summary_large_image" : "summary"}
    />
    <meta name="twitter:creator" content={twitterCreator} />
    <meta name="twitter:title" content={computedTitle} />
  </head>
  <body data-swipe-threshold="75">
    {
      Astro.url.pathname !== "/" && (
        <header>
          <nav
            class:list={[
              fullWidth && "wide",
              fullWidth ? "container-wide" : "container",
            ]}
          >
            {<a href={returnUrl || "/"}>Reupen’s photos</a>}
            {showTitle && <h1 class="small hide-small-and-short">{title}</h1>}
            {previousUrl && (
              <a
                href={previousUrl}
                class="coloured right small hide-small"
                aria-keyshortcuts="ArrowLeft"
                title="Previous image (←)"
              >
                <i class="fa-solid fa-chevron-left" />
                <span class="nav-link-text">
                  Previous<span class="visually-hidden"> image</span>
                </span>
              </a>
            )}
            {nextUrl && (
              <a
                href={nextUrl}
                class:list={[
                  "coloured",
                  "small",
                  "hide-small",
                  !previousUrl && "right",
                ]}
                aria-keyshortcuts="ArrowRight"
                title="Next image (→)"
              >
                <span class="nav-link-text">
                  Next<span class="visually-hidden"> image</span>
                </span>
                <i class="fa-solid fa-chevron-right" />
              </a>
            )}
          </nav>
        </header>
      )
    }
    <main>
      <slot />
    </main>
  </body>
</html>

<style>
  @import "../utils/media-queries.pcss";

  header {
    padding: 0.5rem 0.75rem;
    background: #000;
    font-size: 20px;
    font-weight: 500;
    overflow-x: auto;

    @media (--large) {
      padding: 0.75rem 1.5rem;
    }

    a {
      &:not(.coloured) {
        color: var(--nav-text-colour);
      }

      &:not(:hover) {
        text-decoration-line: none;
      }
    }

    nav {
      display: flex;
      align-items: baseline;
      gap: 1rem;
      flex-wrap: wrap;
      text-wrap: nowrap;

      &.wide {
        max-width: calc((var(--large-max-image-height)) * 1.5);

        @media (--short) {
          max-width: unset;
        }
      }

      .right {
        margin-left: auto;
      }

      .small {
        font-size: 16px;
      }

      .hide-small {
        display: none;

        @media (--large) {
          display: initial;
        }

        @media (--short) {
          display: initial;
        }
      }

      .hide-small-and-short {
        display: none;

        @media (--large) {
          display: initial;
        }
      }

      & h1 {
        font-weight: inherit;
        margin: unset;
      }
    }
  }

  .flex {
    display: flex;
    flex-flow: column;
  }
</style>
